apply plugin: 'com.android.application'

android {
    compileSdkVersion 19 // 'android-L'
    buildToolsVersion '20.0.0'

    defaultConfig {
        applicationId "com.podcatcher.deluxe"
        minSdkVersion 14
        targetSdkVersion 19 // "L"
    }
    // Bring in the signing configurations, place these in a file at
    // ${USER.HOME}/.signing/pcd.gradle for this to work. You need to
    // define one config per flavor. If the property does not exist
    // or the path is not valid, only debug builds will succeed.
    if (project.hasProperty("PodcatcherDeluxe.signing")) {
        def signingConfigs = System.getProperty("user.home") + "/" +
                project.property("PodcatcherDeluxe.signing") + ".gradle"

        if (new File(signingConfigs).exists()) {
            apply from: signingConfigs;
        }
    }
    // Bring in the Dropbox configurations. These are simple properties
    // for the keys and secrets listed in the external file and injected
    // into the different flavors below.
    if (project.hasProperty("PodcatcherDeluxe.dropbox")) {
        def dropboxConfig = System.getProperty("user.home") + "/" +
                project.property("PodcatcherDeluxe.dropbox") + ".gradle"

        if (new File(dropboxConfig).exists()) {
            apply from: dropboxConfig;
        }
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    buildTypes {
        debug {
            versionNameSuffix "-debug"

            resValue "string", "dropbox_scheme", dropboxDebugScheme
            resValue "string", "dropbox_appkey", dropboxDebugKey
            resValue "string", "dropbox_appsecret", dropboxDebugSecret
        }
        play {
            runProguard true
            proguardFiles 'proguard-rules.pro'
        }
        amazon {
            runProguard true
            proguardFiles 'proguard-rules.pro'
        }
        slideme {
            runProguard true
            proguardFiles 'proguard-rules.pro'
        }
    }

    flavorDimensions "media", "edition"
    productFlavors {
        def audioSimpleSigningVariable = signingConfigs.audioSimple
        def audioDeluxeSigningVariable = signingConfigs.audioDeluxe
        def videoDeluxeSigningVariable = signingConfigs.videoDeluxe

        simple {
            flavorDimension "edition"
            applicationId "net.alliknow.podcatcher"
            versionCode 200
            versionName "3.0.6"

            signingConfig audioSimpleSigningVariable

            resValue "string", "dropbox_scheme", dropboxSimpleScheme
            resValue "string", "dropbox_appkey", dropboxSimpleKey
            resValue "string", "dropbox_appsecret", dropboxSimpleSecret
        }
        deluxe {
            flavorDimension "edition"
        }
        audio {
            flavorDimension "media"
            applicationId "com.podcatcher.deluxe"
            versionCode 201
            versionName "4.0.6"

            signingConfig audioDeluxeSigningVariable

            resValue "string", "dropbox_scheme", dropboxAudioScheme
            resValue "string", "dropbox_appkey", dropboxAudioKey
            resValue "string", "dropbox_appsecret", dropboxAudioSecret
        }
        video {
            flavorDimension "media"
            applicationId "com.podcatcher.deluxe.video"
            versionCode 202
            versionName "5.0.6"

            signingConfig videoDeluxeSigningVariable

            resValue "string", "dropbox_scheme", dropboxVideoScheme
            resValue "string", "dropbox_appkey", dropboxVideoKey
            resValue "string", "dropbox_appsecret", dropboxVideoSecret
        }
    }
}

dependencies {
    // These are the libs to include: gpodder, colorpicker and Dropbox
    compile project(':gpodder_sync')
    compile project(':color_picker')
    compile files('libs/dropbox-sync-sdk-android.jar')
    compile files("$buildDir/native-libs/native-libs.jar")

    compile fileTree(include: ['*.jar'], dir: 'libs')

    compile 'com.android.support:support-v4:20.0.0'
    compile 'com.android.support:support-annotations:+'
}

task nativeLibsToJar(type: Zip) {
    destinationDir file("$buildDir/native-libs")
    baseName 'native-libs'
    extension 'jar'
    from fileTree(dir: 'libs', include: '**/*.so')
    into 'lib/'
}

tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn(nativeLibsToJar)
}