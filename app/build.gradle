apply plugin: 'com.android.application'

android {
    compileSdkVersion 21
    buildToolsVersion '21.1.1'

    defaultConfig {
        versionCode 205
        minSdkVersion 14
        targetSdkVersion 21
    }
    // Bring in the signing configurations, place these in a file at
    // ${USER.HOME}/.signing/pcd.gradle for this to work. You need to
    // define one config per flavor. If the property does not exist
    // or the path is not valid, only debug builds will succeed.
    if (project.hasProperty("PodcatcherDeluxe.signing")) {
        def signingConfigs = System.getProperty("user.home") + "/" +
                project.property("PodcatcherDeluxe.signing") + ".gradle"

        if (new File(signingConfigs).exists()) {
            apply from: signingConfigs;
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    buildTypes {
        debug {
            versionNameSuffix "-debug"

            buildConfigField "String", "STORE", "\"Debug Store\""
            buildConfigField "String", "STORE_URL_PREFIX", "\"market://details?id=\""
        }
        play {
            buildConfigField "String", "STORE", "\"Google Play\""
            buildConfigField "String", "STORE_URL_PREFIX", "\"market://details?id=\""

            minifyEnabled true
            proguardFiles 'proguard-rules.pro'
        }
        amazon {
            buildConfigField "String", "STORE", "\"Amazon\""
            buildConfigField "String", "STORE_URL_PREFIX", "\"http://www.amazon.com/gp/mas/dl/android?p=\""

            minifyEnabled true
            proguardFiles 'proguard-rules.pro'
        }
        slideme {
            buildConfigField "String", "STORE", "\"SlideMe\""
            buildConfigField "String", "STORE_URL_PREFIX", "\"http://slideme.org/app/\""

            minifyEnabled true
            proguardFiles 'proguard-rules.pro'
        }
        samsung {
            buildConfigField "String", "STORE", "\"Samsung\""
            // Link to Google Play because Samsung does not allow new apps
            buildConfigField "String", "STORE_URL_PREFIX", "\"market://details?id=\""

            minifyEnabled true
            proguardFiles 'proguard-rules.pro'
        }
    }

    flavorDimensions "media", "edition"
    productFlavors {
        def audioSimpleSigningVariable = signingConfigs.audioSimple
        def audioDeluxeSigningVariable = signingConfigs.audioDeluxe
        def videoDeluxeSigningVariable = signingConfigs.videoDeluxe

        simple {
            flavorDimension "edition"
            applicationId "net.alliknow.podcatcher"
            versionName "3.2.1"

            signingConfig audioSimpleSigningVariable
        }
        deluxe {
            flavorDimension "edition"
        }
        audio {
            flavorDimension "media"
            applicationId "com.podcatcher.deluxe"
            versionName "4.2.1"

            signingConfig audioDeluxeSigningVariable
        }
        video {
            flavorDimension "media"
            applicationId "com.podcatcher.deluxe.video"
            versionName "5.2.1"

            signingConfig videoDeluxeSigningVariable
        }
    }
    variantFilter { variant ->
        // Ignore all variant we do not need: release and videoSimple
        if (variant.buildType.name.equals('release') ||
                (variant.flavors.get(0).name.equals('video') && variant.flavors.get(1).name.equals('simple'))) {
            variant.setIgnore(true);
        }
    }
}

dependencies {
    // These are the libs to include:
    // 1) gpodder.net connector (local lib module)
    compile project(':gpodder_sync')
    // 2) Dropbox Sync API (see https://www.dropbox.com/developers/blog/57/using-the-sync-api-with-android-studio)
    compile files('libs/dropbox-sync-sdk-android.jar')
    compile files("$buildDir/native-libs/native-libs.jar")
    // 3) Picasso (podcast logo loading)
    compile 'com.squareup.picasso:picasso:2.3.+'

    compile fileTree(include: ['*.jar'], dir: 'libs')

    compile 'com.android.support:support-v4:21+'
    compile 'com.android.support:support-annotations:+'
}

task nativeLibsToJar(type: Zip) {
    destinationDir file("$buildDir/native-libs")
    baseName 'native-libs'
    extension 'jar'
    from fileTree(dir: 'libs', include: '**/*.so')
    into 'lib/'
}

tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn(nativeLibsToJar)
}